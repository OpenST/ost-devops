user  deployer;
worker_processes  {{nginx.worker_processes}};

error_log  {{nginx.logs_dir}}/error-{{application}}.log;
pid        {{nginx.pid_dir}}/nginx-{{application}}.pid;

events {
    worker_connections  5000;
    use epoll;
}


http {
    passenger_root {{passenger_root}};
    passenger_ruby {{gemset_wrappers}}/ruby;
    passenger_max_pool_size {{nginx.passenger_max_pool_size}};
    passenger_max_request_queue_size 0;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main '"[$time_iso8601]": USER_IP="$remote_addr" - APP_IP="$upstream_addr" - RES_TIME="$upstream_response_time" - STATUS="$status" - BODYSIZE="$body_bytes_sent" - REQUEST="$request" - REFERER="$http_referer" - AGENT="$http_user_agent" SERVER="$server_name" - HTTP_X_FORWARDED_FOR="$http_x_forwarded_for" - UPSTREAMSTATUS="$upstream_status" - PROXY="$proxy_add_x_forwarded_for"- HTTP_VIA="$http_via" - REQUEST_TIME="$request_time" - CONN_SERIAL_NUM="$connection" - CONN_REQUESTS="$connection_requests" - X-Request-Id="$upstream_http_x_request_id" - host=$host - ssl_protocol=$ssl_protocol - binary_remote_addr="$binary_remote_addr" - NGINX-REQUEST-ID="$request_id"';

    access_log  {{nginx.logs_dir}}/access-{{application}}.log  main;

    sendfile        on;
    ignore_invalid_headers      on;
    passenger_show_version_in_header off;
    keepalive_timeout  65;
    gzip  on;
    gzip_static       on;
    gzip_types text/plain application/json;
    gzip_min_length 500;
    gzip_http_version 1.1;
    gzip_proxied      expired no-cache no-store private auth;

    proxy_intercept_errors on;
    server_names_hash_bucket_size 128;
    client_max_body_size 32m;

    server_tokens off;
    more_clear_headers  'ETag' 'Server' 'X-Powered-By' 'X-Runtime';

    {% if nginx.realip_from is defined %}
    {% for item in nginx.realip_from %}
      set_real_ip_from {{item}};
    {% endfor %}
      real_ip_header x-forwarded-for;
      real_ip_recursive on;
    {% endif %}

    limit_req_zone {{nginx.rate_limit.limit_key}} zone={{application}}_reqs_1:{{nginx.rate_limit.zone_size}} rate={{nginx.rate_limit.rate}};
    server {
        listen       {{ nginx.listen_port }};
        server_name  127.0.0.1;

        if ($http_user_agent ~* "ELB-HealthChecker/*") {
            return 200;
        }

        set $rw_rule 1;
        set $rw_url 'https://{{domain}}';

        if ($host = '{{domain}}') {
            set $rw_rule 0;
        }

        if ($host = '{{sub_domain}}') {
            set $rw_rule 0;
        }

        if ($rw_rule = 1) {
            rewrite  ^/(.*)$ $rw_url/$1 permanent;
        }

        set $https_rw_rule 0;
        if ($http_x_forwarded_proto != "https") {
            set $https_rw_rule 1;
        }

        if ($https_rw_rule = 1) {
            rewrite  ^/(.*)$  https://$host/$1  permanent;
        }

        root {{app_base_directory}}/{{application}}/current/public;
        passenger_enabled on;
        passenger_min_instances {{nginx.passenger_min_instances}};
        client_max_body_size 32m;
        gzip_vary         on;
        charset utf-8;
        rails_env {{env}};

        limit_req zone={{application}}_reqs_1 burst={{nginx.rate_limit.burst_size}} delay={{nginx.rate_limit.delay}};
        limit_req_status 429;
        limit_conn_status 429;

        location ~* ^.+\.(jpg|jpeg|ico|png|gif|css|zip|tgz|gz|rar|bz2|doc|xls|xml|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|mov)$ {
            expires   10d;
            root {{app_base_directory}}/{{application}}/current/public;
        }

        error_page    404  429  /404.html;

        location = /404.html {
            root  {{app_base_directory}}/{{application}}/current/public;
        }

        error_page   500 502 503 504    /500.html;

        location = /500.html {
            root  {{app_base_directory}}/{{application}}/current/public;
        }
    }

    passenger_pre_start http://127.0.0.1:{{ nginx.listen_port }}/;

}
